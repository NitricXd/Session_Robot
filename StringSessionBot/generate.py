from asyncio.exceptions import TimeoutError
from Data import Data
from pyrogram import Client, filters
from telethon import TelegramClient
from telethon.sessions import StringSession
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneNumberInvalid,
    PhoneCodeInvalid,
    PhoneCodeExpired,
    SessionPasswordNeeded,
    PasswordHashInvalid
)
from telethon.errors import (
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
    PasswordHashInvalidError
)


@Client.on_message(filters.private & ~filters.forwarded & filters.command('generate'))
async def main(_, msg):
    await msg.reply(
        "¬ª ·¥© ü·¥á·¥Äs·¥á ·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á ·¥© è·¥õ ú·¥è…¥  ü…™ ô Ä·¥Ä Ä è “ì·¥è Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á s·¥õ Ä…™…¥…¢ :**",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("P è Ä·¥è…¢ Ä·¥Ä·¥ç", callback_data="pyrogram"),
            InlineKeyboardButton("T·¥á ü·¥á·¥õ ú·¥è…¥", callback_data="telethon")
        ]])
    )


async def generate_session(bot, msg, telethon=False):
    await msg.reply("¬ª ·¥õ Ä è…™…¥…¢ ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ **{}** s·¥áss…™·¥è…¥ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä...".format("Telethon" if telethon else "Pyrogram"))
    user_id = msg.chat.id
    api_id_msg = await bot.ask(user_id, "¬ª s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥áss…™·¥è…¥ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥© Ä·¥è·¥Ñ·¥áss...\n\n·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä **·¥Ä·¥©…™_…™·¥Ö** ·¥õ·¥è ·¥© Ä·¥è·¥Ñ·¥á·¥á·¥Ö.", filters=filters.text)
    if await cancelled(api_id_msg):
        return
    try:
        api_id = int(api_id_msg.text)
    except ValueError:
        await api_id_msg.reply("**·¥Ä·¥©…™_…™·¥Ö** ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ …™…¥·¥õ·¥á…¢·¥á Ä, s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    api_hash_msg = await bot.ask(user_id, "¬ª …¥·¥è·¥° ·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä **·¥Ä·¥©…™_ ú·¥Äs ú** ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á", filters=filters.text)
    if await cancelled(api_id_msg):
        return
    api_hash = api_hash_msg.text
    phone_number_msg = await bot.ask(user_id, "¬ª ·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä **·¥© ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä** ·¥°…™·¥õ ú ·¥Ñ·¥è·¥ú…¥·¥õ Ä è ·¥Ñ·¥è·¥Ö·¥á “ì·¥è Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á s·¥áss…™·¥è…¥. \n·¥áx·¥Ä·¥ç·¥© ü·¥á : `+910000000000`", filters=filters.text)
    if await cancelled(api_id_msg):
        return
    phone_number = phone_number_msg.text
    await msg.reply("¬ª ·¥õ Ä è…™…¥…¢ ·¥õ·¥è s·¥á…¥·¥Ö ·¥è·¥õ·¥© ·¥Ä·¥õ ·¥õ ú·¥á …¢…™·¥†·¥á…¥ …¥·¥ú·¥ç ô·¥á Ä...")
    if telethon:
        client = TelegramClient(StringSession(), api_id, api_hash)
    else:
        client = Client(":memory:", api_id, api_hash)
    await client.connect()
    try:
        if telethon:
            code = await client.send_code_request(phone_number)
        else:
            code = await client.send_code(phone_number)
    except (ApiIdInvalid, ApiIdInvalidError):
        await msg.reply("¬ª  è·¥è·¥ú Ä **·¥Ä·¥©…™_…™·¥Ö** ·¥Ä…¥·¥Ö **·¥Ä·¥©…™_ ú·¥Äs ú** ·¥Ñ·¥è·¥ç ô…™…¥·¥Ä·¥õ…™·¥è…¥ ·¥Ö·¥è·¥ás…¥'·¥õ ·¥ç·¥Ä·¥õ·¥Ñ ú ·¥°…™·¥õ ú ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥©·¥©s s ès·¥õ·¥á·¥ç. \…¥\…¥·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    except (PhoneNumberInvalid, PhoneNumberInvalidError):
        await msg.reply("¬ª ·¥õ ú·¥á **·¥© ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä**  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ ·¥Ö·¥è·¥ás…¥'·¥õ  ô·¥á ü·¥è…¥…¢ ·¥õ·¥è ·¥Ä…¥ è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\…¥\…¥·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    try:
        phone_code_msg = await bot.ask(user_id, "¬ª ·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á **·¥è·¥õ·¥©** ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú'·¥†·¥á  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö “ì Ä·¥è·¥ç ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥è…¥  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\…¥…™“ì ·¥è·¥õ·¥© …™s `12345`, **·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö …™·¥õ ·¥Äs** `1 2 3 4 5`.", filters=filters.text, timeout=600)
        if await cancelled(api_id_msg):
            return
    except TimeoutError:
        await msg.reply("¬ª ·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥è“ì 10 ·¥ç…™…¥·¥ú·¥õ·¥ás.\…¥\…¥·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    phone_code = phone_code_msg.text.replace(" ", "")
    try:
        if telethon:
            await client.sign_in(phone_number, phone_code, password=None)
        else:
            await client.sign_in(phone_number, code.phone_code_hash, phone_code)
    except (PhoneCodeInvalid, PhoneCodeInvalidError):
        await msg.reply("¬ª ·¥õ ú·¥á ·¥è·¥õ·¥©  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ …™s **·¥° Ä·¥è…¥…¢.**\…¥\…¥·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    except (PhoneCodeExpired, PhoneCodeExpiredError):
        await msg.reply("¬ª ·¥õ ú·¥á ·¥è·¥õ·¥©  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ …™s **·¥áx·¥©…™ Ä·¥á·¥Ö.**\…¥\…¥·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return
    except (SessionPasswordNeeded, SessionPasswordNeededError):
        try:
            two_step_msg = await bot.ask(user_id, "¬ª ·¥© ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä **·¥õ·¥°·¥è s·¥õ·¥á·¥© ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥** ·¥©·¥Äss·¥°·¥è Ä·¥Ö ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á.", filters=filters.text, timeout=300)
        except TimeoutError:
            await msg.reply("¬ª ·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥è“ì 5 ·¥ç…™…¥·¥ú·¥õ·¥ás.\…¥\…¥·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(Data.generate_button))
            return
        try:
            password = two_step_msg.text
            if telethon:
                await client.sign_in(password=password)
            else:
                await client.check_password(password=password)
            if await cancelled(api_id_msg):
                return
        except (PasswordHashInvalid, PasswordHashInvalidError):
            await two_step_msg.reply("¬ª ·¥õ ú·¥á ·¥©·¥Äss·¥°·¥è Ä·¥Ö  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ …™s ·¥° Ä·¥è…¥…¢.\…¥\…¥·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
            return
    if telethon:
        string_session = client.session.save()
    else:
        string_session = await client.export_session_string()
    text = "**·¥õ ú…™s …™s  è·¥è·¥ú Ä {} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥** \n\n`{}` \n\n…¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö  ô è :** @Xd_Nitric \nüçí **…¥·¥è·¥õ·¥á :** ·¥Ö·¥è…¥'·¥õ s ú·¥Ä Ä·¥á …™·¥õ  üçë ·¥Ä…¥·¥Ö ·¥Ö·¥è…¥'·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥ä·¥è…™…¥ @TheXCodeTeam ü•∫".format("TELETHON" if telethon else "PYROGRAM", string_session)
    try:
        await client.send_message("me", text)
    except KeyError:
        pass
    await client.disconnect()
    await phone_code_msg.reply("¬ª s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö  è·¥è·¥ú Ä {} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥.\n\n·¥© ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás ·¥õ·¥è …¢·¥á·¥õ …™·¥õ ! \n\n**·¥Ä s·¥õ Ä…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä  ô·¥è·¥õ  ô è** @TheXCodeTeam ü•∫".format("telethon" if telethon else "pyrogram"))


async def cancelled(msg):
    if "/cancel" in msg.text:
        await msg.reply("¬ª ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥© Ä·¥è·¥Ñ·¥áss !", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return True
    elif "/restart" in msg.text:
        await msg.reply("**¬ª s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú…™s  ô·¥è·¥õ “ì·¥è Ä  è·¥è·¥ú !**", quote=True, reply_markup=InlineKeyboardMarkup(Data.generate_button))
        return True
    elif msg.text.startswith("/"):  # Bot Commands
        await msg.reply("**¬ª ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥© Ä·¥è·¥Ñ·¥áss !**", quote=True)
        return True
    else:
        return False
